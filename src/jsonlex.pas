
(* lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG *)

(* global definitions: *)
(*
Copyright (C) 2014, Sridharan S

This file is part of Json2Xml.

Json2Xml is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Json2Xml is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License version 3
along with json2xml.  If not, see <http://www.gnu.org/licenses/>.
*)
unit jsonlex;

interface

uses
  SysUtils, LexLib;

const
      LCB = 257;
      RCB = 258;
      LSB = 259;
      RSB = 260;
      COMMA = 261;
      COLON = 262;
      QUOTE = 263;
      TEXT = 264;
      QTEXT = 265;
      COMMENT = 266;
var
  cline: AnsiString;
  function yylex: integer;

const STR = 2;

 implementation

function yylex : Integer;

procedure yyaction ( yyruleno : Integer );
  (* local definitions: *)
begin
  (* actions: *)
  case yyruleno of
  1:
                                ;

  2:
                                    ;

  3:
            begin
              start(0);
              return(QUOTE);
            end;

  4:
            begin
              start(STR);
              return(QUOTE);
            end;

  5:
               begin
                  return(QTEXT);
               end;

  6:
            begin
              return(LCB);
            end;

  7:
            begin
              return(RCB);
            end;

  8:
            begin
              return(LSB);
            end;

  9:
             begin
              return(RSB);
            end;

  10:
            begin
              return(COLON);
            end;

  11:
            begin
              return(COMMA);
            end;

  12:
                  begin
              return(TEXT);
            end;

  13:
            ;


  end;
end(*yyaction*);

(* DFA table: *)

type YYTRec = record
                cc : set of Char;
                s  : Integer;
              end;

const

yynmarks   = 65;
yynmatches = 65;
yyntrans   = 130;
yynstates  = 48;

yyk : array [1..yynmarks] of Integer = (
  { 0: }
  { 1: }
  { 2: }
  5,
  { 3: }
  5,
  { 4: }
  12,
  { 5: }
  4,
  { 6: }
  6,
  { 7: }
  7,
  { 8: }
  8,
  { 9: }
  9,
  { 10: }
  10,
  { 11: }
  11,
  { 12: }
  12,
  { 13: }
  12,
  13,
  { 14: }
  13,
  { 15: }
  5,
  12,
  { 16: }
  3,
  4,
  { 17: }
  5,
  13,
  { 18: }
  5,
  6,
  { 19: }
  5,
  7,
  { 20: }
  5,
  8,
  { 21: }
  5,
  9,
  { 22: }
  5,
  10,
  { 23: }
  5,
  11,
  { 24: }
  5,
  12,
  { 25: }
  5,
  12,
  13,
  { 26: }
  12,
  { 27: }
  12,
  { 28: }
  5,
  12,
  { 29: }
  5,
  12,
  { 30: }
  5,
  { 31: }
  { 32: }
  12,
  { 33: }
  12,
  { 34: }
  { 35: }
  2,
  { 36: }
  5,
  12,
  { 37: }
  5,
  { 38: }
  5,
  12,
  { 39: }
  5,
  { 40: }
  { 41: }
  12,
  { 42: }
  5,
  { 43: }
  5,
  12,
  { 44: }
  1,
  { 45: }
  1,
  12,
  { 46: }
  1,
  5,
  { 47: }
  1,
  5,
  12
);

yym : array [1..yynmatches] of Integer = (
{ 0: }
{ 1: }
{ 2: }
  5,
{ 3: }
  5,
{ 4: }
  12,
{ 5: }
  4,
{ 6: }
  6,
{ 7: }
  7,
{ 8: }
  8,
{ 9: }
  9,
{ 10: }
  10,
{ 11: }
  11,
{ 12: }
  12,
{ 13: }
  12,
  13,
{ 14: }
  13,
{ 15: }
  5,
  12,
{ 16: }
  3,
  4,
{ 17: }
  5,
  13,
{ 18: }
  5,
  6,
{ 19: }
  5,
  7,
{ 20: }
  5,
  8,
{ 21: }
  5,
  9,
{ 22: }
  5,
  10,
{ 23: }
  5,
  11,
{ 24: }
  5,
  12,
{ 25: }
  5,
  12,
  13,
{ 26: }
  12,
{ 27: }
  12,
{ 28: }
  5,
  12,
{ 29: }
  5,
  12,
{ 30: }
  5,
{ 31: }
{ 32: }
  12,
{ 33: }
  12,
{ 34: }
{ 35: }
  2,
{ 36: }
  5,
  12,
{ 37: }
  5,
{ 38: }
  5,
  12,
{ 39: }
  5,
{ 40: }
{ 41: }
  12,
{ 42: }
  5,
{ 43: }
  5,
  12,
{ 44: }
  1,
{ 45: }
  1,
  12,
{ 46: }
  1,
  5,
{ 47: }
  1,
  5,
  12
);

yyt : array [1..yyntrans] of YYTrec = (
{ 0: }
  ( cc: [ #1..#8,#11..#31,'!','#'..'+','-','.','0'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 12),
  ( cc: [ #9 ]; s: 13),
  ( cc: [ #10,' ' ]; s: 14),
  ( cc: [ '"' ]; s: 5),
  ( cc: [ ',' ]; s: 11),
  ( cc: [ '/' ]; s: 4),
  ( cc: [ ':' ]; s: 10),
  ( cc: [ '[' ]; s: 8),
  ( cc: [ ']' ]; s: 9),
  ( cc: [ '{' ]; s: 6),
  ( cc: [ '}' ]; s: 7),
{ 1: }
  ( cc: [ #1..#8,#11..#31,'!','#'..'+','-','.','0'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 12),
  ( cc: [ #9 ]; s: 13),
  ( cc: [ #10,' ' ]; s: 14),
  ( cc: [ '"' ]; s: 5),
  ( cc: [ ',' ]; s: 11),
  ( cc: [ '/' ]; s: 4),
  ( cc: [ ':' ]; s: 10),
  ( cc: [ '[' ]; s: 8),
  ( cc: [ ']' ]; s: 9),
  ( cc: [ '{' ]; s: 6),
  ( cc: [ '}' ]; s: 7),
{ 2: }
  ( cc: [ #1..#8,#11..#31,'!','#'..'+','-','.','0'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 24),
  ( cc: [ #9 ]; s: 25),
  ( cc: [ #10 ]; s: 14),
  ( cc: [ ' ' ]; s: 17),
  ( cc: [ '"' ]; s: 16),
  ( cc: [ ',' ]; s: 23),
  ( cc: [ '/' ]; s: 15),
  ( cc: [ ':' ]; s: 22),
  ( cc: [ '[' ]; s: 20),
  ( cc: [ ']' ]; s: 21),
  ( cc: [ '{' ]; s: 18),
  ( cc: [ '}' ]; s: 19),
{ 3: }
  ( cc: [ #1..#8,#11..#31,'!','#'..'+','-','.','0'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 24),
  ( cc: [ #9 ]; s: 25),
  ( cc: [ #10 ]; s: 14),
  ( cc: [ ' ' ]; s: 17),
  ( cc: [ '"' ]; s: 16),
  ( cc: [ ',' ]; s: 23),
  ( cc: [ '/' ]; s: 15),
  ( cc: [ ':' ]; s: 22),
  ( cc: [ '[' ]; s: 20),
  ( cc: [ ']' ]; s: 21),
  ( cc: [ '{' ]; s: 18),
  ( cc: [ '}' ]; s: 19),
{ 4: }
  ( cc: [ #1..#9,#11..#31,'!','#'..')','+','-','.',
            '0'..'9',';'..'Z','\','^'..'z','|','~'..#255 ]; s: 12),
  ( cc: [ '*' ]; s: 26),
  ( cc: [ '/' ]; s: 27),
{ 5: }
{ 6: }
{ 7: }
{ 8: }
{ 9: }
{ 10: }
{ 11: }
{ 12: }
  ( cc: [ #1..#9,#11..#31,'!','#'..'+','-'..'9',';'..'Z',
            '\','^'..'z','|','~'..#255 ]; s: 12),
{ 13: }
  ( cc: [ #1..#8,#11..#31,'!','#'..'+','-'..'9',';'..'Z',
            '\','^'..'z','|','~'..#255 ]; s: 12),
  ( cc: [ #9 ]; s: 13),
  ( cc: [ #10,' ' ]; s: 14),
{ 14: }
  ( cc: [ #9,#10,' ' ]; s: 14),
{ 15: }
  ( cc: [ #1..#9,#11..#31,'!','#'..')','+','-','.',
            '0'..'9',';'..'Z','\','^'..'z','|','~'..#255 ]; s: 24),
  ( cc: [ ' ',',',':','[',']','{','}' ]; s: 30),
  ( cc: [ '*' ]; s: 28),
  ( cc: [ '/' ]; s: 29),
{ 16: }
{ 17: }
  ( cc: [ #1..#8,#11..#31,'!','#'..#255 ]; s: 30),
  ( cc: [ #9,' ' ]; s: 17),
  ( cc: [ #10 ]; s: 14),
{ 18: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 30),
{ 19: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 30),
{ 20: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 30),
{ 21: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 30),
{ 22: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 30),
{ 23: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 30),
{ 24: }
  ( cc: [ #1..#9,#11..#31,'!','#'..'+','-'..'9',';'..'Z',
            '\','^'..'z','|','~'..#255 ]; s: 24),
  ( cc: [ ' ',',',':','[',']','{','}' ]; s: 30),
{ 25: }
  ( cc: [ #1..#8,#11..#31,'!','#'..'+','-'..'9',';'..'Z',
            '\','^'..'z','|','~'..#255 ]; s: 24),
  ( cc: [ #9 ]; s: 25),
  ( cc: [ #10 ]; s: 14),
  ( cc: [ ' ' ]; s: 17),
  ( cc: [ ',',':','[',']','{','}' ]; s: 30),
{ 26: }
  ( cc: [ #1..#9,#11..#31,'!','#'..')','+','-'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 33),
  ( cc: [ #10,' ','"',',',':','[',']','{','}' ]; s: 31),
  ( cc: [ '*' ]; s: 32),
{ 27: }
  ( cc: [ #1..#9,#11..#31,'!','#'..'+','-'..'9',';'..'Z',
            '\','^'..'z','|','~'..#255 ]; s: 27),
  ( cc: [ #10 ]; s: 35),
  ( cc: [ ' ','"',',',':','[',']','{','}' ]; s: 34),
{ 28: }
  ( cc: [ #1..#9,#11..#31,'!','#'..')','+','-'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 38),
  ( cc: [ #10,'"' ]; s: 31),
  ( cc: [ ' ',',',':','[',']','{','}' ]; s: 37),
  ( cc: [ '*' ]; s: 36),
{ 29: }
  ( cc: [ #1..#9,#11..#31,'!','#'..'+','-'..'9',';'..'Z',
            '\','^'..'z','|','~'..#255 ]; s: 29),
  ( cc: [ #10 ]; s: 35),
  ( cc: [ ' ',',',':','[',']','{','}' ]; s: 39),
  ( cc: [ '"' ]; s: 34),
{ 30: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 30),
{ 31: }
  ( cc: [ #1..')','+'..#255 ]; s: 31),
  ( cc: [ '*' ]; s: 40),
{ 32: }
  ( cc: [ #1..#9,#11..#31,'!','#'..'+','-','.','0'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 33),
  ( cc: [ #10,' ','"',',',':','[',']','{','}' ]; s: 31),
  ( cc: [ '/' ]; s: 12),
{ 33: }
  ( cc: [ #1..#9,#11..#31,'!','#'..')','+','-'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 33),
  ( cc: [ #10,' ','"',',',':','[',']','{','}' ]; s: 31),
  ( cc: [ '*' ]; s: 41),
{ 34: }
  ( cc: [ #1..#9,#11..#255 ]; s: 34),
  ( cc: [ #10 ]; s: 35),
{ 35: }
  ( cc: [ #10 ]; s: 35),
{ 36: }
  ( cc: [ #1..#9,#11..#31,'!','#'..'+','-','.','0'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 38),
  ( cc: [ #10,'"' ]; s: 31),
  ( cc: [ ' ',',',':','[',']','{','}' ]; s: 37),
  ( cc: [ '/' ]; s: 24),
{ 37: }
  ( cc: [ #1..#9,#11..'!','#'..')','+'..#255 ]; s: 37),
  ( cc: [ #10,'"' ]; s: 31),
  ( cc: [ '*' ]; s: 42),
{ 38: }
  ( cc: [ #1..#9,#11..#31,'!','#'..')','+','-'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 38),
  ( cc: [ #10,'"' ]; s: 31),
  ( cc: [ ' ',',',':','[',']','{','}' ]; s: 37),
  ( cc: [ '*' ]; s: 43),
{ 39: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 39),
  ( cc: [ #10 ]; s: 35),
  ( cc: [ '"' ]; s: 34),
{ 40: }
  ( cc: [ #1..'.','0'..#255 ]; s: 31),
  ( cc: [ '/' ]; s: 44),
{ 41: }
  ( cc: [ #1..#9,#11..#31,'!','#'..'+','-','.','0'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 33),
  ( cc: [ #10,' ','"',',',':','[',']','{','}' ]; s: 31),
  ( cc: [ '/' ]; s: 45),
{ 42: }
  ( cc: [ #1..#9,#11..'!','#'..'.','0'..#255 ]; s: 37),
  ( cc: [ #10,'"' ]; s: 31),
  ( cc: [ '/' ]; s: 46),
{ 43: }
  ( cc: [ #1..#9,#11..#31,'!','#'..'+','-','.','0'..'9',
            ';'..'Z','\','^'..'z','|','~'..#255 ]; s: 38),
  ( cc: [ #10,'"' ]; s: 31),
  ( cc: [ ' ',',',':','[',']','{','}' ]; s: 37),
  ( cc: [ '/' ]; s: 47),
{ 44: }
{ 45: }
  ( cc: [ #1..#9,#11..#31,'!','#'..'+','-'..'9',';'..'Z',
            '\','^'..'z','|','~'..#255 ]; s: 12),
{ 46: }
  ( cc: [ #1..#9,#11..'!','#'..#255 ]; s: 30),
{ 47: }
  ( cc: [ #1..#9,#11..#31,'!','#'..'+','-'..'9',';'..'Z',
            '\','^'..'z','|','~'..#255 ]; s: 24),
  ( cc: [ ' ',',',':','[',']','{','}' ]; s: 30)
);

yykl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 2,
{ 4: } 3,
{ 5: } 4,
{ 6: } 5,
{ 7: } 6,
{ 8: } 7,
{ 9: } 8,
{ 10: } 9,
{ 11: } 10,
{ 12: } 11,
{ 13: } 12,
{ 14: } 14,
{ 15: } 15,
{ 16: } 17,
{ 17: } 19,
{ 18: } 21,
{ 19: } 23,
{ 20: } 25,
{ 21: } 27,
{ 22: } 29,
{ 23: } 31,
{ 24: } 33,
{ 25: } 35,
{ 26: } 38,
{ 27: } 39,
{ 28: } 40,
{ 29: } 42,
{ 30: } 44,
{ 31: } 45,
{ 32: } 45,
{ 33: } 46,
{ 34: } 47,
{ 35: } 47,
{ 36: } 48,
{ 37: } 50,
{ 38: } 51,
{ 39: } 53,
{ 40: } 54,
{ 41: } 54,
{ 42: } 55,
{ 43: } 56,
{ 44: } 58,
{ 45: } 59,
{ 46: } 61,
{ 47: } 63
);

yykh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 1,
{ 3: } 2,
{ 4: } 3,
{ 5: } 4,
{ 6: } 5,
{ 7: } 6,
{ 8: } 7,
{ 9: } 8,
{ 10: } 9,
{ 11: } 10,
{ 12: } 11,
{ 13: } 13,
{ 14: } 14,
{ 15: } 16,
{ 16: } 18,
{ 17: } 20,
{ 18: } 22,
{ 19: } 24,
{ 20: } 26,
{ 21: } 28,
{ 22: } 30,
{ 23: } 32,
{ 24: } 34,
{ 25: } 37,
{ 26: } 38,
{ 27: } 39,
{ 28: } 41,
{ 29: } 43,
{ 30: } 44,
{ 31: } 44,
{ 32: } 45,
{ 33: } 46,
{ 34: } 46,
{ 35: } 47,
{ 36: } 49,
{ 37: } 50,
{ 38: } 52,
{ 39: } 53,
{ 40: } 53,
{ 41: } 54,
{ 42: } 55,
{ 43: } 57,
{ 44: } 58,
{ 45: } 60,
{ 46: } 62,
{ 47: } 65
);

yyml : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 1,
{ 2: } 1,
{ 3: } 2,
{ 4: } 3,
{ 5: } 4,
{ 6: } 5,
{ 7: } 6,
{ 8: } 7,
{ 9: } 8,
{ 10: } 9,
{ 11: } 10,
{ 12: } 11,
{ 13: } 12,
{ 14: } 14,
{ 15: } 15,
{ 16: } 17,
{ 17: } 19,
{ 18: } 21,
{ 19: } 23,
{ 20: } 25,
{ 21: } 27,
{ 22: } 29,
{ 23: } 31,
{ 24: } 33,
{ 25: } 35,
{ 26: } 38,
{ 27: } 39,
{ 28: } 40,
{ 29: } 42,
{ 30: } 44,
{ 31: } 45,
{ 32: } 45,
{ 33: } 46,
{ 34: } 47,
{ 35: } 47,
{ 36: } 48,
{ 37: } 50,
{ 38: } 51,
{ 39: } 53,
{ 40: } 54,
{ 41: } 54,
{ 42: } 55,
{ 43: } 56,
{ 44: } 58,
{ 45: } 59,
{ 46: } 61,
{ 47: } 63
);

yymh : array [0..yynstates-1] of Integer = (
{ 0: } 0,
{ 1: } 0,
{ 2: } 1,
{ 3: } 2,
{ 4: } 3,
{ 5: } 4,
{ 6: } 5,
{ 7: } 6,
{ 8: } 7,
{ 9: } 8,
{ 10: } 9,
{ 11: } 10,
{ 12: } 11,
{ 13: } 13,
{ 14: } 14,
{ 15: } 16,
{ 16: } 18,
{ 17: } 20,
{ 18: } 22,
{ 19: } 24,
{ 20: } 26,
{ 21: } 28,
{ 22: } 30,
{ 23: } 32,
{ 24: } 34,
{ 25: } 37,
{ 26: } 38,
{ 27: } 39,
{ 28: } 41,
{ 29: } 43,
{ 30: } 44,
{ 31: } 44,
{ 32: } 45,
{ 33: } 46,
{ 34: } 46,
{ 35: } 47,
{ 36: } 49,
{ 37: } 50,
{ 38: } 52,
{ 39: } 53,
{ 40: } 53,
{ 41: } 54,
{ 42: } 55,
{ 43: } 57,
{ 44: } 58,
{ 45: } 60,
{ 46: } 62,
{ 47: } 65
);

yytl : array [0..yynstates-1] of Integer = (
{ 0: } 1,
{ 1: } 12,
{ 2: } 23,
{ 3: } 35,
{ 4: } 47,
{ 5: } 50,
{ 6: } 50,
{ 7: } 50,
{ 8: } 50,
{ 9: } 50,
{ 10: } 50,
{ 11: } 50,
{ 12: } 50,
{ 13: } 51,
{ 14: } 54,
{ 15: } 55,
{ 16: } 59,
{ 17: } 59,
{ 18: } 62,
{ 19: } 63,
{ 20: } 64,
{ 21: } 65,
{ 22: } 66,
{ 23: } 67,
{ 24: } 68,
{ 25: } 70,
{ 26: } 75,
{ 27: } 78,
{ 28: } 81,
{ 29: } 85,
{ 30: } 89,
{ 31: } 90,
{ 32: } 92,
{ 33: } 95,
{ 34: } 98,
{ 35: } 100,
{ 36: } 101,
{ 37: } 105,
{ 38: } 108,
{ 39: } 112,
{ 40: } 115,
{ 41: } 117,
{ 42: } 120,
{ 43: } 123,
{ 44: } 127,
{ 45: } 127,
{ 46: } 128,
{ 47: } 129
);

yyth : array [0..yynstates-1] of Integer = (
{ 0: } 11,
{ 1: } 22,
{ 2: } 34,
{ 3: } 46,
{ 4: } 49,
{ 5: } 49,
{ 6: } 49,
{ 7: } 49,
{ 8: } 49,
{ 9: } 49,
{ 10: } 49,
{ 11: } 49,
{ 12: } 50,
{ 13: } 53,
{ 14: } 54,
{ 15: } 58,
{ 16: } 58,
{ 17: } 61,
{ 18: } 62,
{ 19: } 63,
{ 20: } 64,
{ 21: } 65,
{ 22: } 66,
{ 23: } 67,
{ 24: } 69,
{ 25: } 74,
{ 26: } 77,
{ 27: } 80,
{ 28: } 84,
{ 29: } 88,
{ 30: } 89,
{ 31: } 91,
{ 32: } 94,
{ 33: } 97,
{ 34: } 99,
{ 35: } 100,
{ 36: } 104,
{ 37: } 107,
{ 38: } 111,
{ 39: } 114,
{ 40: } 116,
{ 41: } 119,
{ 42: } 122,
{ 43: } 126,
{ 44: } 126,
{ 45: } 127,
{ 46: } 128,
{ 47: } 130
);


var yyn : Integer;

label start, scan, action;

begin

start:

  (* initialize: *)

  yynew;

scan:

  (* mark positions and matches: *)

  for yyn := yykl[yystate] to     yykh[yystate] do yymark(yyk[yyn]);
  for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);

  if yytl[yystate]>yyth[yystate] then goto action; (* dead state *)

  (* get next character: *)

  yyscan;

  (* determine action: *)

  yyn := yytl[yystate];
  while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yystate] then goto action;
    (* no transition on yyactchar in this state *)

  (* switch to new state: *)

  yystate := yyt[yyn].s;

  goto scan;

action:

  (* execute action: *)

  if yyfind(yyrule) then
    begin
      yyaction(yyrule);
      if yyreject then goto action;
    end
  else if not yydefault and yywrap then
    begin
      yyclear;
      return(0);
    end;

  if not yydone then goto start;

  yylex := yyretval;

end(*yylex*);


end.

